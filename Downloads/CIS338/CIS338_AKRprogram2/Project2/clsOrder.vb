Public Class clsOrder
    'This class holds the properties for each order and the functions that
    'are needed for performing any logic. It is called by controller class
    'It also performs all validation 

    'CIS 338 - Project 2
    'Author: Alejandro Krasovsky
    'Due Date: Nov. 16, 2015

    Private sID As String                       'Hold Order ID
    Private sCustomerName As String             'Hold Customer Name
    Private sPhoneNumber As String              'Hold Phone Number
    Private sDate As String                     'Hold Date
    Private detailsList As ArrayList            'Hold the detail line items as an Arraylist
    Private sError As String                    'Hold any errors generated by this class

    Public Sub New()
        'Set our initial values
        sID = ""
        sCustomerName = ""
        sError = ""
        detailsList = New ArrayList
    End Sub

    '===================================================
    ' Object properties setters / getters
    '===================================================

    Public Property ID()
        'get and set the order id
        Get
            Return sID
        End Get
        Set(ByVal value)

            'Validation at class level
            If isValidID(value) = True Then
                sID = Convert.ToInt32(value)
            End If
        End Set
    End Property

    Public Property CustomerName()
        'Get and set the customer name
        Get
            Return sCustomerName
        End Get
        Set(ByVal value)
            'Validate, you can also add a try/catch
            If isValidName(value) Then
                sCustomerName = value
            End If
        End Set
    End Property

    Public Property PhoneNumber()
        Get
            Return sPhoneNumber
        End Get
        Set(value)
            If isValidPhoneNumber(value) Then
                sPhoneNumber = value
            End If
        End Set
    End Property

    Public Property aDate()
        Get
            Return sDate
        End Get
        Set(value)
            If isValidDate(value) Then
                sDate = value
            End If
        End Set
    End Property

    '===================================================
    ' Helper routines
    '===================================================

    Public Sub AddDetail(ByVal aDetailsList As ArrayList)

        'Loop through all our arraylist of details
        For i As Integer = 0 To aDetailsList.Count - 1
            'get a single order detail line out of 
            'the ArrayList of orders details
            Dim arrItem As String() = aDetailsList(i)

            'create a new order detail object
            Dim myOrderDetail As New clsOrderDetail

            'Add detail info to our object
            ' 0 - detail line
            ' 1 - Item Description
            ' 2 - Item Quantity
            ' 3 - Item Price

            If Not (arrItem(0) = "") Then
                myOrderDetail.line = arrItem(0)
            End If

            If Not (arrItem(1) = "") Then
                myOrderDetail.Item = arrItem(1)
            End If

            If Not (arrItem(2) = "") Then
                myOrderDetail.Qty = arrItem(2)
            End If

            If Not (arrItem(3) = "") Then
                myOrderDetail.Price = arrItem(3)
            End If

            If myOrderDetail.getError = "" Then
                myOrderDetail.total()
            End If

            'Add the order to our collection
            'Check for errors in the detail
            'if no errors then add
            If myOrderDetail.getError = "" Then
                detailsList.Add(myOrderDetail)
            Else
                addError(myOrderDetail.getError)
            End If
        Next

        If detailsList.Count = 0 Then
            addError("Detail:Order must contain at least one valid detail line")
        End If
    End Sub

    Public Function getLineTotal(ByVal iLine As Integer) As Decimal

        'return the line total
        'Loop through all the order lines
        For i As Integer = 0 To detailsList.Count - 1

            Dim myOrderDetail As clsOrderDetail = CType(detailsList(i), clsOrderDetail)
            If myOrderDetail.line = iLine Then
                Return myOrderDetail.total
            End If
        Next
    End Function

    Public Function getSubTotal() As Decimal
        'return the total for the order
        Dim aTotal As Decimal
        For i As Integer = 0 To detailsList.Count - 1
            Dim anOrderDetail As clsOrderDetail = CType(detailsList(i), clsOrderDetail)
            aTotal += anOrderDetail.total
        Next

        Return aTotal
    End Function


    Public Function getTax() As Decimal
        'return tax for the order
        Dim aTotal As Decimal = getSubTotal()
        Dim tax As Decimal
        Dim taxRate As Decimal = 0.07825

        tax = aTotal * taxRate

        Return tax
    End Function

    Public Function getTotal() As Decimal
        Dim aTotal As Decimal = getSubTotal()
        Dim total As Decimal
        total = aTotal + getTax()


        Return total
    End Function

    Public Function addDelivery() As Decimal
        Dim Delivery As Integer = 10
        Dim total As Decimal

        total = getTotal() + 10

        Return total
    End Function

    Private Sub addError(ByVal s As String)
        'private function to format our error message by
        'adding line breaks when necessary
        If sError = "" Then
            sError = s
        Else
            sError += vbCrLf & s
        End If
    End Sub

    '===================================================
    ' Public functions to access the detail lines
    ' and the error
    '===================================================

    Public Function GetDetail() As ArrayList
        'Retrieve a detail item from the order
        Dim detailItemsList As New ArrayList
        For i As Integer = 0 To detailsList.Count - 1
            Dim orderDetail As New clsOrderDetail
            orderDetail = detailsList.Item(i)

            Dim arrDetail(4) As String

            arrDetail(0) = orderDetail.line
            arrDetail(1) = orderDetail.Item
            arrDetail(2) = orderDetail.Qty
            arrDetail(3) = orderDetail.Price
            arrDetail(4) = orderDetail.total

            detailItemsList.Add(arrDetail)
        Next
        Return detailItemsList
    End Function

    Public Function getError()
        'public Function to return the error 
        'To other objects
        Return sError
    End Function

    '===================================================
    ' Validation routines
    '===================================================

    Private Function isValidID(ByVal s As String) As Boolean
        Dim bResult As Boolean
        Dim anID As Integer
        Try
            If (Integer.TryParse(s, anID) AndAlso getMod(anID) = True) Then
                bResult = True
            Else
                addError("ID: Invalid ID format")
                bResult = False
            End If
        Catch ex As Exception
            addError("ID: Invalid ID (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function

    Private Function getMod(i As Integer) As Boolean
        Dim m As Boolean
        Dim test As Integer
        test = i Mod 100

        If (test = 0) Then
            m = True
        Else
            m = False
        End If
        Return m

    End Function

    Private Function isValidName(ByVal s As String) As Boolean
        Dim bResult As Boolean
        Try
            If Not (s = "") Then
                bResult = True
            Else
                addError("Name: Invalid Customer Name")
                bResult = False
            End If
        Catch ex As Exception
            addError("Name: Invalid Customer Name (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function

    Private Function isValidPhoneNumber(s As String) As Boolean
        Dim bResult As Boolean
        Dim tmp As Integer
        Try
            Dim chars As Char() = s.ToCharArray()
            Dim count As Integer
            For count = 0 To chars.GetLength(0) - 1

                If (Integer.TryParse(chars(count), tmp)) Then
                    bResult = True
                Else
                    bResult = False
                End If
            Next

            If (chars.GetLength(0) = 10) Then
                bResult = True
            Else
                addError("Phone Number: Invalid Phone Number. Phone Number must be 10 digists")
                bResult = False
            End If
        Catch ex As Exception
            addError("Phone Number: Invalid Phone Number (" & ex.Message & ")")
            bResult = False
        End Try
        Return bResult
    End Function

    Private Function isValidDate(s As String) As Boolean
        Dim bResult As Boolean
        Dim tmp As Date
        Try
            If (Date.TryParse(s, tmp)) Then
                bResult = True
            Else
                addError("Date: Invalid Date")
                bResult = False
            End If

        Catch ex As Exception
            addError("Date: Date (" & ex.Message & ")")
            bResult = False
        End Try
        Return bResult
    End Function

End Class
